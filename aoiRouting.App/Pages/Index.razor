@page "/"
@using aoiRouting.Shared
@using System.Web
@using aoiRouting.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@inject IJSRuntime Js;
@implements IPinClient
@inject NavigationManager NavManager
@inject HttpClient HttpClient
<LoginManager />
@if (_highlightedCoords != null)
{
	<ActionMenu Coords="@(((double, double))(_highlightedCoords.Lat, _highlightedCoords.Lon))" CloseCallback="@CloseActionMenu" />
}
<div style="position: absolute;right: 0;width: 75%; height:100%">
	<MapComponent ViewDetailsCallback="@ViewDetails" OnAOISetAsync="@OnAOISet" OnLongPressAsync="@ShowLongPressMenu" UpdateLocationAsync="@LocationUpdate" />
</div>
<div style="position: absolute;left: 0; width: 30%; height:100%">
	@if (future != null && past != null)
	{
		<SideBar Past="@past" Future="@future" />
	}
</div>
@code
{
	private HubConnection _pinHubConnection;
	private Dictionary<Guid, Pin> _currentPins = new();
	private Dictionary<Guid, AOI> _currentAOIs = new();
	private List<Pin> past = new();
	private List<Pin> future = new();
	private Position _curPos;
	private Guid? _details;
	private Position? _highlightedCoords;
	private string[] _ids;
	private bool pin = false;
	private async Task CloseActionMenu()
	{
		await Js.InvokeVoidAsync("removeLongPressIndicator");
		_highlightedCoords = null;
		StateHasChanged();
	}
	private async Task ShowLongPressMenu(double lat, double lon)
	{
		_highlightedCoords = new(lat, lon);
		await _pinHubConnection.SendAsync("JoinSurroundingTiles", _highlightedCoords);
		await Js.InvokeVoidAsync("placeLongPressIndicator", lat, lon);
		StateHasChanged();
	}
	private async Task LocationUpdate(Guid id, double lat, double lon)
	{
		// TO-DO: HAVE LOCATION CHANGE PERSIST
/*		Console.WriteLine("BEFORE: " + pin);
		string stuff = id.ToString() + " " + lat.ToString() + " " + lon.ToString();
		await HttpClient.PostAsJsonAsync("Pin/UpdateLocation", stuff);
		Console.WriteLine("AFTER: " + pin);
*/
	}
	private async void UpdateCallback()
	{
		var pins = await HttpClient.GetFromJsonAsync<Guid[]>("Pin/GetPins");
		past = await HttpClient.GetFromJsonAsync<List<Pin>>($"Pin/GetPinCollected/{JsonConvert.SerializeObject(pins)}");
		future = await HttpClient.GetFromJsonAsync<List<Pin>>($"Pin/GetPinPending/{JsonConvert.SerializeObject(pins)}");
		List<Pin> past2 = past;
		List<Pin> future2 = future;
		past = null;
		future = null;
		StateHasChanged();
		past = past2;
		future = future2;
		StateHasChanged();
	}
	private async Task ViewDetails(Guid id)
	{
		_details = null;
		StateHasChanged();
		pin = true;
		_details = id;
		StateHasChanged();
	}
	private void CloseDetailsView()
	{
		_details = null;
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		_pinHubConnection = new HubConnectionBuilder().WithUrl(HttpClient.BaseAddress + "PinHub").Build();
		await _pinHubConnection.StartAsync();
		_pinHubConnection.On<Pin>(nameof(ReceivePin), ReceivePin);
	}
	private async Task OnAOISet(double lat, double lon)
	{
		_curPos = new(lat, lon);
		await _pinHubConnection.SendAsync("JoinSurroundingTiles", _curPos);
		var pine = await HttpClient.GetFromJsonAsync<Guid[]>("Pin/GetPins");
		var pins = await HttpClient.GetFromJsonAsync<List<Pin>>($"Pin/ConvertPins/{JsonConvert.SerializeObject(pine)}");
		if (pins != null)
		{
			foreach (var p in pins)
			{
				await ReceivePin(p);
			}
		};
		UpdateCallback();
	}
	protected async Task OnLocationChanged(double lat, double lon)
	{
		_curPos = new(lat, lon);
		await _pinHubConnection.SendAsync("JoinSurroundingTiles", _curPos);
	}
	public async Task ReceivePin(Pin pin)
	{
		_currentPins.Add(pin.ID, pin);
		await Js.InvokeVoidAsync("placePin", pin);
	}
	// TO-DO: actually receive the AOI and set it somewhere, probably in OnAOISet or something
	public async Task ReceiveAOI(AOI aoi)
	{
		_currentAOIs.Add(aoi.ID, aoi);
	}
}