@inject IJSRuntime Js;
@using System
@using System.Text.Json
@using aoiRouting.Shared.Models

<div id="@_mapId" class="google-map"></div>
@code
{
    [Parameter] public Func<double, double, Task> OnAOISetAsync { get; set; } 
    [Parameter] public Func<Guid, Task> ViewDetailsCallback { get; set; }
    [Parameter] public Func<double, double, Task> OnLongPressAsync { get; set; }
    [Parameter] public Func<Guid, double, double, Task> UpdateLocationAsync { get; set; }
    [JSInvokable] public async Task ViewDetails(string idString)
    {
        Guid.TryParse(idString, out Guid id);
        await ViewDetailsCallback(id);
    }
    [JSInvokable] public async Task OnLongPress(double lat, double lon)
    {
        await OnLongPressAsync(lat, lon);
    }
    [JSInvokable]
    public async Task UpdateLocation(string idStr, double lat, double lon)
    {
        Guid.TryParse(idStr, out Guid id);
        await UpdateLocationAsync(id, lat, lon);
    }
}
@code
{
    private string _mapId;
    private double _lat;
    private double _lon;
    private bool _mapsInitialized;
    private bool _domReady;
    private bool _locationReady;
    private DotNetObjectReference<MapComponent> _objectReference;
    protected override void OnInitialized()
    {
        _mapId = $"gMap-{Guid.NewGuid()}";
        _objectReference = DotNetObjectReference.Create(this);
    }
    protected override async Task OnInitializedAsync()
    {
        await GeoLocate();
    }
    private async Task GeoLocate()
    {
        bool location = await Js.InvokeAsync<bool>("getLocation", _objectReference);
    }
    [JSInvokable] public async Task SetLocation(double lat, double lon)
    {
        _lat = lat;
        _lon = lon;
        _locationReady = true;
        if (!_mapsInitialized && _domReady)
        {
            await InitMap();
            await OnAOISetAsync(_lat, _lon);
        }
        else
        {
            await Js.InvokeVoidAsync("moveMeMarker", _lat, _lon);
        }
    }
    private async Task InitMap()
    {
        if (_domReady)
        {   
            await Js.InvokeVoidAsync("initMap", _objectReference, _mapId, _lat, _lon, 18);
            _mapsInitialized = true;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_locationReady)
            {
                await InitMap();
                _mapsInitialized = true;
            }
            else
            {
                _domReady = true;
            }
        }
    }
}