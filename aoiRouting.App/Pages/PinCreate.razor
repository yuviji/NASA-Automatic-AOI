@using aoiRouting.Shared.Models
@using System.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Blazored.Modal
@using Blazored.Modal.Services
@using aoiRouting.Shared
@using aoiRouting.App.Pages
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager;
@inject HttpClient Http;
@inject IJSRuntime Js;
<EditForm Model="@_model" OnValidSubmit="@SubmitPin">
    <div>
        <label style="font-weight:bold">Latitude (°):</label>
        <InputNumber placeholder="@_model.Position.Lat" style="color: white" @bind-Value="@_model.Position.Lat" />
    </div>
    <div>
        <label style="font-weight:bold">Longitude (°):</label>
        <InputNumber placeholder="@_model.Position.Lon" style="color: white" @bind-Value="@_model.Position.Lon" />
    </div>
    <div>
        <label style="font-weight:bold">Notes:</label>
        <br />
        <InputTextArea placeholder="Notes..." style="color: white" @bind-Value="@_model.Notes" />
    </div>
    <div>
        <label style="font-weight:bold">Date:</label>
        <InputDate style="color: white" @bind-Value="_date" />
    </div>
    <div>
        <label style="font-weight:bold">Time:</label>
        <InputText type="time" style="color: white" @bind-Value="TimeProxy" />
    </div>
    <div class="woops">
        <button type="submit" style="float:right;font-weight:bold;">Submit!</button>
    </div>
</EditForm>
@code
{
    private string TimeProxy
    {
        get => createdtime.ToString();
        set => TimeSpan.TryParse(value, out createdtime);
    }
    private TimeSpan createdtime = DateTime.Now.TimeOfDay;
    [Parameter] public (double, double) Position { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private DateTime _date = DateTime.Now.Date;
    private Pin _model = new();

    protected override void OnInitialized()
    {
        _model.Position = aoiRouting.Shared.Position.FromTuple(Position); 
    }

    private async Task SubmitPin()
    {
        _model.Created = (_date + createdtime).ToUniversalTime();
        _model.Collected = null;
        _model.PointID = 0;
        await Http.PostAsJsonAsync("Pin/CreatePins", _model);
        await ModalInstance.CloseAsync(ModalResult.Ok("Submitted Successfully"));
        _model = new();
        StateHasChanged();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}